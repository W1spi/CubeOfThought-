// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Å—Ö–∞–ª–∫–∞–º–∏
#include <U8g2lib.h>
#include <Wire.h>
#include "esp_sleep.h"

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

const int btnNext = 19;
const int btnPrev = 18;

const int maxCharsPerLine = 36;
const int linesPerPage = 4;
const int scrollDelay = 2000;
const int phraseDuration = 30000;

const char* phrases[] = {
  "–°–ª–æ–º–∞–ª—Å—è? –ó–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ —Å–æ–±—Ä–∞—Ç—å —Å–µ–±—è –∏–Ω–∞—á–µ - –ø—Ä–æ—á–Ω–µ–µ.",
  "–ë—ã–ª–æ —Ç—è–∂–µ–ª–æ? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –Ω–µ —Å–±–µ–∂–∞–ª.",
  "–£–ø–∞–ª? –û—Ç–ª–∏—á–Ω–æ. –ü–æ–¥–Ω–∏–º–∞–π—Å—è. –ó–µ–º–ª—è - –Ω–µ —Ç–≤–æ–π –¥–æ–º.",
  "–†—É–∫–∏ –æ–ø—É—Å—Ç–∏–ª–∏—Å—å? –ó–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ –∏–º–∏ –æ—Ç—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è.",
  "–ë–æ–ª—å–Ω–æ? –ó–Ω–∞—á–∏—Ç, —Ç—ã –∂–∏–≤. –ê –∑–Ω–∞—á–∏—Ç - –µ—â—ë –º–æ–∂–µ—à—å.",
  "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–Ω—è–ª? –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –≤–∏–Ω–∞. –ü—Ä–æ—Å—Ç–æ —Ç—ã –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏.",
  "–°–∫–∞–∑–∞–ª–∏, –Ω–µ –≤—ã–π–¥–µ—Ç? –ù–µ –∑–∞–±—É–¥—å –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.",
  "–°—Ç–∞–ª–æ —Ç–µ–º–Ω–æ? –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –≤–∏–¥–Ω–æ, –∫—Ç–æ —Ç—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ.",
  "–û—à–∏–±—Å—è? –ó–Ω–∞—á–∏—Ç, —Ç—ã –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª. –ê –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–µ—á—Ç–∞–ª.",
  "–ù–∏—á–µ–≥–æ –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—à—å? –ó–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∑–∞—á–µ–º –Ω–∞—á–∞–ª.",
  "–ë–æ–∏—à—å—Å—è? –ó–Ω–∞—á–∏—Ç, —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —Ä–æ—Å—Ç–∞.",
  "–•–æ—á–µ—à—å —Å–¥–∞—Ç—å—Å—è? –û—Ç–ª–∏—á–Ω–æ. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç - —Ç—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏.",
  "–ù–µ –≤–µ—Ä—è—Ç –≤ —Ç–µ–±—è? –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —Å–¥–µ–ª–∞—Ç—å –≥—Ä–æ–º—á–µ.",
  "–ö–∞–∂–µ—Ç—Å—è, –≤—Å—ë –ø–æ—Ç–µ—Ä—è–Ω–æ? –¢–æ–≥–¥–∞ —Ç–µ—Ä—è—Ç—å –Ω–µ—á–µ–≥–æ. –ò–¥–∏ –≤–ø–µ—Ä—ë–¥.",
  "–¢—ã –Ω–µ —Å–ª–æ–º–∞–Ω–Ω—ã–π. –¢—ã –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∞–µ—à—å —Å–µ–±—è –ø–æ–¥ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.",
  "–ï—Å–ª–∏ –Ω–µ —Ç—ã - —Ç–æ –∫—Ç–æ? –ï—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å - —Ç–æ –∫–æ–≥–¥–∞?",
  "–¢—ã –Ω–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π. –¢—ã –ø—Ä–æ—Å—Ç–æ –∏–¥—ë—à—å –ø–æ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–π –¥–æ—Ä–æ–≥–µ.",
  "–ü–∞—É–∑–∞ - —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü. –≠—Ç–æ –∑–∞—Ç—è–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä—ã–∂–∫–æ–º.",
  "–¢—ã –Ω–µ —Å–ª–∞–±. –¢—ã –ø—Ä–æ—Å—Ç–æ —á–µ–ª–æ–≤–µ–∫. –ò —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.",
  "–í—Å—ë —Ä—É—à–∏—Ç—Å—è? –ó–Ω–∞—á–∏—Ç, —Ç—ã –±–ª–∏–∑–∫–æ –∫ –∏—Å—Ç–∏–Ω–µ.",
  "–£—Å—Ç–∞–ª? –û—Ç–¥–æ—Ö–Ω–∏. –ù–æ –Ω–µ –±—Ä–æ—Å–∞–π.",
  "–¢—ã - –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–æ–∫. –¢—ã - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–æ–∫.",
  "–ù–µ –ø–æ–Ω–∏–º–∞–µ—à—å, –∑–∞—á–µ–º? –ü—Ä–æ–¥–æ–ª–∂–∞–π. –û—Ç–≤–µ—Ç –¥–æ–≥–æ–Ω–∏—Ç –ø–æ–∑–∂–µ.",
  "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –∂–µ–ª–µ–∑–Ω—ã–º. –ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Ä–∂–∞–≤–µ—Ç—å –≤–Ω—É—Ç—Ä–∏.",
  "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á—É–≤—Å—Ç–≤? –ó–Ω–∞—á–∏—Ç, —Ç—ã –∂–∏–≤. –ó–Ω–∞—á–∏—Ç, —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π.",
  "–•–æ—á–µ—à—å –¥—Ä—É–≥–æ–≥–æ –±—É–¥—É—â–µ–≥–æ? –ü–µ—Ä–µ–ø–∏—à–∏ –∫–æ–¥ —Å–≤–æ–µ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.",
  "–¢–∏—à–∏–Ω–∞ –≤–æ–∫—Ä—É–≥? –õ—É—á—à–µ —É—Å–ª—ã—à–∏—à—å —Å–µ–±—è.",
  "–î—É–º–∞–µ—à—å, —Ç—ã –Ω–µ —Ç–æ—Ç? –ü—Ä–æ–≤–µ—Ä—å. –ê –≤–¥—Ä—É–≥ - –∏–º–µ–Ω–Ω–æ —Ç—ã.",
  "–ò–¥—ë—à—å –æ–¥–∏–Ω? –ó–Ω–∞—á–∏—Ç, —Ç—ã –ø–µ—Ä–≤—ã–π.",
  "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–∏–¥—ë—Ç —Å–∞–º–∞. –û–Ω–∞ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è.",
  
    // üé≠ –ò–≥—Ä–∞—é—â–∏–µ / –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ
  "–í—Ä–µ–º—è –≤—ã—à–ª–æ? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ - –Ω–∞ —Å–≤–æ–∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö.",
  "–ù–µ –≤–ø–∏—Å–∞–ª—Å—è? –°–æ–∑–¥–∞–π —Å–≤–æ–π –∫–æ–Ω—Ç—É—Ä.",
  "–û—à–∏–±—Å—è? –°—Ç–∞–ª–æ –±—ã—Ç—å, —Ç—ã –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –∞ –Ω–µ —Å–º–æ—Ç—Ä–µ–ª.",
  "–£—Å—Ç–∞–ª? –í—ã–¥–æ—Ö–Ω–∏. –ò —à–∞–≥–Ω–∏ –¥–∞–ª—å—à–µ.",
  "–ù–µ –≤–∏–¥–Ω–æ –≤—ã—Ö–æ–¥–∞? –¢–æ–≥–¥–∞ —Ç—ã –≤–Ω—É—Ç—Ä–∏ –Ω–∞—á–∞–ª–∞.",
  "–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ? –≠—Ç–æ —É—Ä–æ–≤–µ–Ω—å, –≥–¥–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è —Å–∏–ª–∞.",
  "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø—É—Ç—å? –ü—Ä–æ—Ç–æ–ø—á–∏ –Ω–æ–≤—ã–π.",
  "–°–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è? –≠—Ç–æ —Ä–∞–∑—É–º –¥—ã—à–∏—Ç.",
  "–ü–∞–¥–∞–µ—à—å? –ó–µ–º–ª—è –±–ª–∏–∂–µ, —á–µ–º –∫–∞–∑–∞–ª–∞—Å—å.",
  "–°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ? –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ.",
  "–ë–æ–∏—à—å—Å—è? –¢—ã –∂–∏–≤. –ò —Ç—ã –∏–¥—ë—à—å.",
  "–ü–µ—Ä–µ–ø—É—Ç–∞–ª —à–∞–≥–∏? –¢–æ–≥–¥–∞ —Ç–∞–Ω—Ü—É–π.",
  "–ó–∞–±–ª—É–¥–∏–ª—Å—è? –¢–∞–∫ –∏ –Ω–∞—Ö–æ–¥—è—Ç —Å–µ–±—è.",
  "–í—Å–µ –ø—Ä–æ—Ç–∏–≤? –ó–Ω–∞—á–∏—Ç, —Ç—ã –≤ —Ç–æ—á–∫–µ –ø–µ—Ä–µ–º–µ–Ω.",
  "–ó–∞—Ç–µ—Ä—è–ª —Å–º—ã—Å–ª? –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–æ–≤—ã–π.",
  "–†–∞–∑—Ä—É—à–µ–Ω? –ó–Ω–∞—á–∏—Ç, —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω —Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∫ —Ö–æ—á–µ—à—å.",
  "–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –¥–µ–ª–∞—é? –ó–Ω–∞—á–∏—Ç, –∏—â—É –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É.",
  "–í—Å—ë —Ä—É—à–∏—Ç—Å—è? –û—Ç–ª–∏—á–Ω–æ. –ó–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
  "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–æ–ª–∏? –¢–æ–≥–¥–∞ —Ç—ã –≤—Å—ë –µ—â—ë –Ω–µ —Å–¥–∞–ª—Å—è.",
  "–•–∞–æ—Å –≤–Ω—É—Ç—Ä–∏? –ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∏—Å–∫—Ä—ã.",
  "–°–ª–∏—à–∫–æ–º —Ç—ë–º–Ω–æ? –¢—ã –∏ –µ—Å—Ç—å —Å–≤–µ—Ç.",
  "–î–≤–∏–≥–∞—é—Å—å –±–µ–∑ —Ü–µ–ª–∏? –ò–Ω–æ–≥–¥–∞ –ø—É—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏.",
  "–ó–∞–¥–µ—Ä–∂–∫–∞ - —ç—Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.",
  "–¢–∏—à–∏–Ω–∞ - —ç—Ç–æ —Å—Ü–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π —Ä–µ–ø–ª–∏–∫–æ–π.",
  "–¢—ã –Ω–µ —Å–ª–æ–º–∞–ª—Å—è. –¢—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—à—å—Å—è.",

  // üåÄ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ
  "–ß–µ–º –≥–ª—É–±–∂–µ –Ω–æ—á—å - —Ç–µ–º —è—Ä—á–µ –∑–≤—ë–∑–¥—ã –≤–Ω—É—Ç—Ä–∏.",
  "–¢—ã –Ω–µ –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏. –¢—ã –µ—ë –∞–≤—Ç–æ—Ä.",
  "–ë–æ–ª—å - —ç—Ç–æ —É—á–∏—Ç–µ–ª—å, –µ—Å–ª–∏ —Ç—ã –Ω–µ —Å–±–µ–∂–∞–ª —Å —É—Ä–æ–∫–∞.",
  "–ù–∞—Å—Ç–æ—è—â–µ–µ - —ç—Ç–æ —Ç–æ—á–∫–∞, –≥–¥–µ –ø—Ä–æ—à–ª–æ–µ –∏ –±—É–¥—É—â–µ–µ —Å–ø–æ—Ä—è—Ç.",
  "–ö–∞–∂–¥—ã–π –º–∏–≥ - –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç - —Ç—ã —Å–∞–º.",
  "–ù–∏—á—Ç–æ –Ω–µ –¥–ª–∏—Ç—Å—è –≤–µ—á–Ω–æ. –ù–∏ —Ö–∞–æ—Å, –Ω–∏ —Å—Ç—Ä–∞—Ö.",
  "–¢—ã –Ω–µ –æ–¥–∏–Ω. –¢—ã —á–∞—Å—Ç—å –æ–≥—Ä–æ–º–Ω–æ–≥–æ —Ç–µ—á–µ–Ω–∏—è.",
  "–ñ–∏–∑–Ω—å –Ω–µ –æ–±—ä—è—Å–Ω—è–µ—Ç—Å—è - –æ–Ω–∞ –æ—â—É—â–∞–µ—Ç—Å—è.",
  "–î–∞–∂–µ —Å—Ç–æ—è –Ω–∞ –º–µ—Å—Ç–µ, —Ç—ã –¥–≤–∏–∂–µ—à—å—Å—è –≤–Ω—É—Ç—Ä–∏.",
  "–ü—É—Ç—å –≤–∞–∂–Ω–µ–µ –ø–æ–±–µ–¥—ã. –ü–æ–±–µ–¥–∞ - –ª–∏—à—å —Ç–æ—á–∫–∞ –∑–∞–ø—è—Ç–æ–π.",
  "–î–∞–∂–µ –∑–≤—ë–∑–¥—ã –ª—É—á—à–µ —Å–≤–æ—Ç—Ä—è—Ç—Å—è –≤–æ —Ç—å–º–µ.",
  "–ò–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞, –µ—Å–ª–∏ —Ç—ã –Ω–µ —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∫ –ø–æ–±–µ–¥–µ.",
  "–ß–µ–ª–æ–≤–µ–∫, —Å–æ–≤–µ—Ä—à–∏–≤—à–∏–π –æ—à–∏–±–∫—É –∏ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–≤—à–∏–π –µ—ë, —Å–æ–≤–µ—Ä—à–∏–ª –µ—â—ë –æ–¥–Ω—É –æ—à–∏–±–∫—É.",
  "–ï—Å–ª–∏ —Å–≤–µ—Ç —Å–≤–µ—á–∏ - —ç—Ç–æ –æ–≥–æ–Ω—å, –∑–Ω–∞—á–∏—Ç, –ø–∏—â–∞ –±—ã–ª–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –æ—á–µ–Ω—å –¥–∞–≤–Ω–æ.",
  "–ï—Å–ª–∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –Ω–µ —Å–ª–æ–∂–∏–ª–∞—Å—å, –∏ —Ç–µ–±–µ —É–∂–µ –Ω–µ —Å–æ–±—Ä–∞—Ç—å –ø–∞–∑–ª—ã - –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.",
  "–ú—ã –¥–æ–π–¥—ë–º –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞! –ê –ø–æ—Ç–æ–º –µ—â—ë –∫—É–¥–∞-–Ω–∏–±—É–¥—å...",
  "–°—Ç—Ä–∞—Ö - –µ—â—ë –æ–¥–∏–Ω –ø–æ–≤–æ–¥ –∏–¥—Ç–∏ –≤–ø–µ—Ä—ë–¥.",
  "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–∏—à–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
  "–¢—ã - –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∏ —Ç–≤–æ—Ä–µ—Ü.",
  "–ù–∏—á—Ç–æ –Ω–µ –ø—Ä–∏–¥–∞—ë—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–µ, —á–µ–º –æ–ø—ã—Ç.",
  "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —ç—Ç–æ –ø–æ–¥–æ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏, —Ç–æ –µ—Å—Ç—å —Å–∫–∞–∑–∞—Ç—å —Å–µ–±–µ: ‚Äû–ß—ë—Ä—Ç —Å –Ω–∏–º‚Äú",
  "–õ—É—á—à–µ –±–µ–∑ —Ç–æ—á–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥, —á–µ–º –±–µ–∑ —Ü–µ–ª–∏ —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ, –∏ —É–∂ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –≥–æ—Ä–∞–∑–¥–æ –ª—É—á—à–µ, —á–µ–º –±–µ–∑ —Ü–µ–ª–∏ –ø—è—Ç–∏—Ç—å—Å—è –Ω–∞–∑–∞–¥.",

  // üå§ –¢—ë–ø–ª—ã–µ / –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ
  "–¢—ã –¥–µ–ª–∞–µ—à—å –ª—É—á—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
  "–¢–≤–æ—ë ¬´–µ—â—ë —á—É—Ç—å-—á—É—Ç—å¬ª —É–∂–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç.",
  "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å —Å–∏–ª—å–Ω—ã–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
  "–î–∞–∂–µ –≤ –º–æ–ª—á–∞–Ω–∏–∏ —Ç—ã —Ü–µ–Ω–µ–Ω.",
  "–ü—Ä–æ—Å—Ç–æ –±—É–¥—å. –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.",
  "–¢—ã - –ø—Ä–∏—á–∏–Ω–∞ —á—å–µ–π-—Ç–æ —É–ª—ã–±–∫–∏. –£–∂–µ.",
  "–ö–∞–∂–¥—ã–π —à–∞–≥ –≤–∞–∂–µ–Ω. –î–∞–∂–µ —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π.",
  "–¢—ã –Ω–µ –∑–∞–±—ã—Ç. –ú–∏—Ä –∑–Ω–∞–µ—Ç –æ —Ç–µ–±–µ.",
  "–ü—Ä–æ—Å—Ç–æ –¥—ã—à–∏. –¢—ã —É–∂–µ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è.",
  "–¢—ã –¥–æ—Å—Ç–æ–∏–Ω. –ò —Ç–æ—á–∫–∞."
};
const int phraseCount = sizeof(phrases) / sizeof(phrases[0]);

String lines[20];
int totalLines = 0;
int currentLine = 0;

int history[100];
int historyPos = 0;
int historyCount = 0;

unsigned long lastScrollTime = 0;
unsigned long startTime = 0;

unsigned long dualButtonStartTime = 0;
bool inEasterEgg = false;

bool prevBtnNext = false;
bool prevBtnPrev = false;

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Å—Ö–∞–ª–æ–∫
unsigned long btnNextPressedTime = 0;
unsigned long btnPrevPressedTime = 0;

int konamiIndex = 0;
const int konamiLength = 4;
char konamiSeq[] = {'L', 'R', 'L', 'R'};

const char* easterEggText1 = "–°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –≤–≥–ª—è–¥–µ—Ç—å—Å—è –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ –≤ —Ç–æ—Ç –º–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –æ–∫—Ä—É–∂–∞–µ—Ç: —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–µ–π—à–∏–µ —Ç–∞–π–Ω—ã —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–∞–º, –≥–¥–µ –∏—Ö –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –∂–¥—ë—à—å";
const char* easterEggText2 = "–ú–∏—Ä –ª—é–±–∏—Ç —Ç–µ—Ö, –∫—Ç–æ –∑–∞–¥–∞—ë—Ç –ª–∏—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ—Ç–æ–º—É —á—Ç–æ –æ—Ç–≤–µ—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.";
const char* easterEggText3 = "–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏. –ê –≥–ª—É–±–∂–µ. –¢—ã –Ω–∞—à—ë–ª –µ–≥–æ. –ê –∑–Ω–∞—á–∏—Ç, —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–π.";
const char* easterEggText4 = "–¢—ã –Ω–∞—à—ë–ª —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–æ–π –∑–¥–µ—Å—å –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ. –≠—Ç–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–º.";

void setup() {
  pinMode(btnNext, INPUT);
  pinMode(btnPrev, INPUT);

  u8g2.begin();
  u8g2.enableUTF8Print();
  u8g2.setFont(u8g2_font_6x13_t_cyrillic);

  randomSeed(analogRead(0));
  int rnd = random(phraseCount);
  history[0] = rnd;
  historyCount = 1;
  drawPhrase(rnd);
  startTime = millis();
}

void loop() {
  unsigned long now = millis();

  bool btnN = digitalRead(btnNext);
  bool btnP = digitalRead(btnPrev);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Å—Ö–∞–ª–∫–∏
  if (btnN && btnP) {
    if (dualButtonStartTime == 0) {
      dualButtonStartTime = now;
    } else if (!inEasterEgg && now - dualButtonStartTime >= 3000) {
      showEasterEgg(easterEggText1);
      return;
    }
  } else {
    dualButtonStartTime = 0;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
  if (btnN) {
    if (btnNextPressedTime == 0) btnNextPressedTime = now;
    if (!inEasterEgg && now - btnNextPressedTime > 5000) {
      showEasterEgg(easterEggText3);
      return;
    }
  } else {
    btnNextPressedTime = 0;
  }

  if (btnP) {
    if (btnPrevPressedTime == 0) btnPrevPressedTime = now;
    if (!inEasterEgg && now - btnPrevPressedTime > 5000) {
      showEasterEgg(easterEggText4);
      return;
    }
  } else {
    btnPrevPressedTime = 0;
  }

  // –ö–æ–Ω—è–º–∏-–ø–∞—Å—Ö–∞–ª–∫–∞ (–≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ)
  if (btnN && !prevBtnNext) {
    if (konamiSeq[konamiIndex] == 'R') {
      konamiIndex++;
      if (konamiIndex >= konamiLength) {
        showEasterEgg(easterEggText2);
        konamiIndex = 0;
        return;
      }
    } else konamiIndex = 0;
  }
  if (btnP && !prevBtnPrev) {
    if (konamiSeq[konamiIndex] == 'L') {
      konamiIndex++;
      if (konamiIndex >= konamiLength) {
        showEasterEgg(easterEggText2);
        konamiIndex = 0;
        return;
      }
    } else konamiIndex = 0;
  }

  if (inEasterEgg) {
    if (btnN || btnP || now - startTime > 60000) {
      inEasterEgg = false;
      nextPhrase();
    }
    return;
  }

  if (now - lastScrollTime > scrollDelay) {
    currentLine++;
    if (currentLine > totalLines - linesPerPage) currentLine = 0;
    drawText();
    lastScrollTime = now;
  }

  if (now - startTime > phraseDuration) {
    nextPhrase();
  }

  if (btnN && !prevBtnNext) {
    nextPhrase();
  }
  prevBtnNext = btnN;

  if (btnP && !prevBtnPrev) {
    if (historyPos > 0) {
      historyPos--;
      drawPhrase(history[historyPos]);
    }
  }
  prevBtnPrev = btnP;

  esp_sleep_enable_timer_wakeup(50 * 1000);
  esp_light_sleep_start();
}

void nextPhrase() {
  int rnd;
  do {
    rnd = random(phraseCount);
  } while (historyCount > 0 && rnd == history[historyPos]);

  history[++historyPos] = rnd;
  historyCount = max(historyCount, historyPos + 1);
  drawPhrase(rnd);
  startTime = millis();
}

void drawPhrase(int index) {
  String text = String(phrases[index]);
  totalLines = 0;
  currentLine = 0;

  while (text.length() > 0) {
    String line = text.substring(0, maxCharsPerLine);
    lines[totalLines++] = line;
    text = text.substring(maxCharsPerLine);
  }
  lines[totalLines++] = "----------------------------------------";
  drawText();
}

void drawText() {
  u8g2.clearBuffer();
  for (int i = 0; i < linesPerPage; i++) {
    int lineIndex = currentLine + i;
    if (lineIndex >= totalLines) break;
    u8g2.setCursor(0, 15 + i * 16);
    u8g2.print(lines[lineIndex]);
  }
  u8g2.sendBuffer();
}

void showEasterEgg(const char* text) {
  inEasterEgg = true;
  startTime = millis();
  totalLines = 0;
  currentLine = 0;

  String t = String(text);
  while (t.length() > 0) {
    String line = t.substring(0, maxCharsPerLine);
    lines[totalLines++] = line;
    t = t.substring(maxCharsPerLine);
  }
  lines[totalLines++] = "----------------------------------------";
  drawText();
}
